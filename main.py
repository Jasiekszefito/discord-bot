import discord
from discord import app_commands
from discord.ext import commands
import os
from dotenv import load_dotenv

load_dotenv()
TOKEN = os.getenv("DISCORD_TOKEN")
GUILD_ID = int(os.getenv("GUILD_ID"))
LEGIT_CHANNEL_ID = int(os.getenv("LEGIT_CHANNEL_ID"))
OFFER_CHANNEL_ID = int(os.getenv("OFFER_CHANNEL_ID"))
OFERTA = os.getenv("OFERTA", "")

intents = discord.Intents.default()
intents.message_content = True
intents.members = True

bot = commands.Bot(command_prefix="!", intents=intents)

ticket_owners = {}
ticket_data = {}

# -------------------
# MODAL TICKETA
# -------------------
class TicketModal(discord.ui.Modal):
    def __init__(self, user, category):
        super().__init__(title=f"Ticket: {category}")
        self.user = user
        self.category = category

        self.problem = discord.ui.TextInput(
            label="Opisz problem / produkt",
            style=discord.TextStyle.paragraph,
            placeholder="Np. opis problemu lub nazwa produktu",
            required=True,
            max_length=1000
        )
        self.add_item(self.problem)

        if category == "Zakup produktu":
            self.amount = discord.ui.TextInput(label="Ilo≈õƒá", placeholder="Podaj ilo≈õƒá", required=True)
            self.price = discord.ui.TextInput(label="Cena", placeholder="Podaj cenƒô", required=True)
            self.add_item(self.amount)
            self.add_item(self.price)

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            self.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True)
        }

        channel = await guild.create_text_channel(
            name=f"ticket-{self.user.name}",
            overwrites=overwrites
        )

        if self.category == "Zakup produktu":
            desc = f"{self.user.mention} chce kupiƒá **{self.problem.value}**\nIlo≈õƒá: {self.amount.value}\nCena: {self.price.value}"
            ticket_data[channel.id] = {
                "user": self.user,
                "produkt": self.problem.value,
                "ilosc": self.amount.value,
                "cena": self.price.value
            }
        else:
            desc = f"{self.user.mention} zg≈Çosi≈Ç problem:\n{self.problem.value}"

        embed = discord.Embed(
            title=f"üéüÔ∏è Ticket: {self.category}",
            description=desc,
            color=discord.Color.blurple()
        )
        embed.set_footer(text="Ticket by M0N3HUS8LE")

        ticket_owners[channel.id] = self.user.id
        await channel.send(embed=embed, view=CloseTicketView())
        await interaction.response.send_message(f"‚úÖ Utworzono ticket: {channel.mention}", ephemeral=True)

# -------------------
# VIEW WYBORU KATEGORII
# -------------------
class TicketCategoryView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        options = [
            discord.SelectOption(label="Reklamacja", description="Z≈Ç√≥≈º reklamacjƒô"),
            discord.SelectOption(label="Zakup produktu", description="Kup produkt"),
            discord.SelectOption(label="Zg≈Çoszenie problemu", description="Zg≈Ço≈õ problem")
        ]

        self.select = discord.ui.Select(
            placeholder="Wybierz kategoriƒô ticketa...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="ticket_select"
        )
        self.add_item(self.select)
        self.select.callback = self.select_callback

    async def select_callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(TicketModal(interaction.user, self.select.values[0]))

# -------------------
# CLOSE TICKET
# -------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚ùå Zamknij ticket", style=discord.ButtonStyle.red)
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket zamkniƒôty. Kana≈Ç zostanie usuniƒôty za 5s", ephemeral=True)
        await discord.utils.sleep_until(discord.utils.utcnow() + discord.utils.timedelta(seconds=5))
        await interaction.channel.delete()

# -------------------
# EVENT READY
# -------------------
@bot.event
async def on_ready():
    print(f"ü§ñ Zalogowano jako {bot.user} (ID: {bot.user.id})")
    guild = discord.Object(id=GUILD_ID)
    bot.tree.copy_global_to(guild=guild)
    await bot.tree.sync(guild=guild)
    print("‚úÖ Slash commands zsynchronizowane.")

    # Tworzymy lub aktualizujemy embed oferty
    offer_channel = bot.get_channel(OFFER_CHANNEL_ID)
    if offer_channel:
        embed = discord.Embed(title="üõí Oferta produkt√≥w", description="Dostƒôpne produkty i ceny:", color=discord.Color.gold())
        for item in OFERTA.split(","):
            if ":" in item:
                name, price = item.split(":", 1)
                embed.add_field(name=name.strip(), value=price.strip(), inline=False)
        pinned = await offer_channel.pins()
        if pinned:
            await pinned[0].edit(embed=embed)
            await pinned[0].pin()
        else:
            m = await offer_channel.send(embed=embed)
            await m.pin()

# -------------------
# MODAL TICKETA
# -------------------
class TicketModal(discord.ui.Modal):
    def __init__(self, user, category):
        super().__init__(title=f"Ticket: {category}")
        self.user = user
        self.category = category

        self.problem = discord.ui.TextInput(
            label="Opisz problem / produkt",
            style=discord.TextStyle.paragraph,
            placeholder="Np. opis problemu lub nazwa produktu",
            required=True,
            max_length=1000
        )
        self.add_item(self.problem)

    async def on_submit(self, interaction: discord.Interaction):
        guild = interaction.guild
        overwrites = {
            guild.default_role: discord.PermissionOverwrite(view_channel=False),
            self.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
            guild.me: discord.PermissionOverwrite(view_channel=True)
        }

        channel = await guild.create_text_channel(
            name=f"ticket-{self.user.name}",
            overwrites=overwrites
        )

        desc = f"{self.user.mention} zg≈Çosi≈Ç problem:\n{self.problem.value}"
        embed = discord.Embed(
            title=f"üéüÔ∏è Ticket: {self.category}",
            description=desc,
            color=discord.Color.blurple()
        )
        embed.set_footer(text="System Ticket√≥w by M0N3HUS8L")

        ticket_owners[channel.id] = self.user.id
        await channel.send(embed=embed, view=CloseTicketView())
        await interaction.response.send_message(f"‚úÖ Utworzono ticket: {channel.mention}", ephemeral=True)

@bot.command(name="regulamin")
async def regulamin(ctx):
    embed = discord.Embed(
        title="üìú Regulamin Serwera",
        description="Witaj na naszym serwerze! Prosimy o przestrzeganie poni≈ºszych zasad:",
        color=discord.Color.blue()
    )
    
    embed.add_field(
        name="1Ô∏è‚É£ Pe≈Çna kultura",
        value="Szanuj innych cz≈Çonk√≥w serwera. Brak obra≈ºania, wyzwisk czy spamu.", 
        inline=False
    )
    
    embed.add_field(
        name="2Ô∏è‚É£ Zero scamu",
        value="Nie oszukuj innych, nie wysy≈Çaj fa≈Çszywych ofert ani link√≥w phishingowych.",
        inline=False
    )
    
    embed.add_field(
        name="3Ô∏è‚É£ Prywatno≈õƒá",
        value="Nie udostƒôpniaj danych osobowych innych u≈ºytkownik√≥w.",
        inline=False
    )
    
    embed.add_field(
        name="4Ô∏è‚É£ Ticket Support",
        value="W razie problem√≥w u≈ºywaj systemu ticket√≥w ‚Äì wybierz kategoriƒô i opisz sw√≥j problem.",
        inline=False
    )
    
    embed.add_field(
        name="5Ô∏è‚É£ Dobre zachowanie",
        value="BƒÖd≈∫ mi≈Çy, pomagaj innym i baw siƒô dobrze!",
        inline=False
    )

    # Dodanie obrazka
    embed.set_image(url="https://i.imgur.com/pRPq8YW.jpeg")

    embed.set_footer(text="Regulamin by M0N3HUS8L ‚Ä¢ Dbajmy o kulturƒô na serwerze üòâ")
    
    await ctx.send(embed=embed)

# -------------------
# VIEW WYBORU KATEGORII
# -------------------
class TicketCategoryView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        options = [
            discord.SelectOption(label="Reklamacja", description="Z≈Ç√≥≈º reklamacjƒô"),
            discord.SelectOption(label="Zakup produktu", description="Kup produkt"),
            discord.SelectOption(label="Zg≈Çoszenie problemu", description="Zg≈Ço≈õ problem")
        ]

        self.select = discord.ui.Select(
            placeholder="Wybierz kategoriƒô ticketa...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="ticket_select"
        )
        self.add_item(self.select)
        self.select.callback = self.select_callback

    async def select_callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(TicketModal(interaction.user, self.select.values[0]))

# -------------------
# CLOSE TICKET
# -------------------
class CloseTicketView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

    @discord.ui.button(label="‚ùå Zamknij ticket", style=discord.ButtonStyle.red)
    async def close_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("üîí Ticket zamkniƒôty. Kana≈Ç zostanie usuniƒôty za 5s", ephemeral=True)
        await discord.utils.sleep_until(discord.utils.utcnow() + discord.utils.timedelta(seconds=5))
        await interaction.channel.delete()

class OfferSelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        options = [
            discord.SelectOption(label="Oferta 1", description="Opis oferty 1"),
            discord.SelectOption(label="Oferta 2", description="Opis oferty 2"),
            discord.SelectOption(label="Oferta 3", description="Opis oferty 3"),
        ]
        self.add_item(discord.ui.Select(
            placeholder="Wybierz ofertƒô",
            options=options,
            custom_id="offer_select",
            min_values=1,
            max_values=1
        ))

    @discord.ui.select(custom_id="offer_select")
    async def select_callback(self, select, interaction: discord.Interaction):
        oferta = select.values[0]
        embed = discord.Embed(
            title=f"üí∞ {oferta}",
            description=f"Szczeg√≥≈Çy {oferta}...",
            color=discord.Color.green()
        )
        # Wiadomo≈õƒá tylko dla klikajƒÖcego
        await interaction.response.send_message(embed=embed, ephemeral=True)

        # Przycisk do zakupu otwiera modal ticketa
        class BuyButtonView(discord.ui.View):
            @discord.ui.button(label="Kup produkt", style=discord.ButtonStyle.green)
            async def buy(self, button, inter: discord.Interaction):
                await inter.response.send_modal(TicketModal(inter.user, "Zakup produktu"))

        await interaction.followup.send("Chcesz kupiƒá ten produkt?", view=BuyButtonView(), ephemeral=True)


# -------------------
# PANEL WYBORU OFERTY
# -------------------
class OfferSelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)

        options = [
            discord.SelectOption(
                label="Oferta 1",
                description="Mentoring Standard",
                emoji="üéì"
            ),
            discord.SelectOption(
                label="Oferta 2",
                description="Mentoring Plus",
                emoji="üíº"
            ),
            discord.SelectOption(
                label="Oferta 3",
                description="Mentoring Premium",
                emoji="üöÄ"
            )
        ]

        self.select = discord.ui.Select(
            placeholder="Kliknij, aby zobaczyƒá szczeg√≥≈Çy oferty...",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="offer_select"
        )
        self.add_item(self.select)
        self.select.callback = self.select_callback

    async def select_callback(self, interaction: discord.Interaction):
        # Opisy ofert
        opis = {
            "Oferta 1": (
                "üí° **Oferta 1 ‚Äì Mentoring**\n"
                "- Mentoring indywidualny\n"
                "- 10 pyta≈Ñ do pomocy w ka≈ºdej chwili\n "
                "- Cena: 50PLN"
                "-Zar0bki ponad 2k Pl7 miesiƒôcznie\n"
            ),
            "Oferta 2": (
                "üí° **Oferta 2 ‚Äì Mentoring Plus**\n"
                "- Mentoring indywidualny\n"
                "- 20 pyta≈Ñ do pomocy\n"
                "- Wiƒôkszy potencja≈Ç zarobku\n"
                "- Cena: 100PLN"
                "-Zar0bki ponad 3k Pl7 miesiƒôcznie\n"
            ),
            "Oferta 3": (
                "üí° **Oferta 3 ‚Äì Premium 24/7**\n"
                "- Mentoring premium\n"
                "- Pomoc 24/7 w ka≈ºdej chwili\n"
                "- Cena: 200PLN"
                "-Zar0bki ponad 5k Pl7 miesiƒôcznie\n"
            )
        }

        embed = discord.Embed(
            title=f"{self.select.values[0]}",
            description=opis[self.select.values[0]],
            color=discord.Color.green()
        )

        # Przyciski do otwarcia ticketa
        view = discord.ui.View(timeout=None)
        button = discord.ui.Button(label="Kup produkt", style=discord.ButtonStyle.green)

        async def button_callback(button_interaction: discord.Interaction):
            await button_interaction.response.send_modal(
                TicketModal(button_interaction.user, "Zakup produktu")
            )

        button.callback = button_callback
        view.add_item(button)

        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

# -------------------
# KOMENDA PREFIX !oferta
# -------------------
@bot.command(name="oferta")
async def oferta_prefix(ctx):
    embed = discord.Embed(
        title="üõí Oferta produkt√≥w",
        description="Kliknij w dropdown poni≈ºej, aby wybraƒá ofertƒô:",
        color=discord.Color.gold()
    )

    # Dodanie du≈ºego obrazka
    embed.set_image(url="https://i.imgur.com/pRPq8YW.jpeg")

    # Opcjonalnie miniaturka w prawym g√≥rnym rogu
    # embed.set_thumbnail(url="https://i.imgur.com/pRPq8YW.jpeg")

    await ctx.send(embed=embed, view=OfferSelectView())

    
# -------------------
# KOMENDA /oferta
# -------------------
@bot.tree.command(name="oferta", description="Sprawd≈∫ ofertƒô produkt√≥w")
async def oferta(interaction: discord.Interaction):
    embed = discord.Embed(
        title="üõí Oferta produkt√≥w",
        description="Kliknij w dropdown poni≈ºej, aby wybraƒá ofertƒô:",
        color=discord.Color.gold()
    )
    await interaction.response.send_message(embed=embed, view=OfferSelectView(), ephemeral=True)

# -------------------
# KOMENDA !ticketpanel
# -------------------
@bot.command(name="ticketpanel")
async def ticketpanel(ctx):
    embed = discord.Embed(
        title="üé´ Kliknij Aby Stworzyƒá Ticketa",
        description="Wybierz kategoriƒô ticketa",
        color=discord.Color.green()
    )

    # Dodanie du≈ºego obrazka
    embed.set_image(url="https://i.imgur.com/pRPq8YW.jpeg")

    # Opcjonalnie mo≈ºesz te≈º dodaƒá miniaturkƒô w rogu embedu
    # embed.set_thumbnail(url="https://i.imgur.com/pRPq8YW.jpeg")

    await ctx.send(embed=embed, view=TicketCategoryView())

# -------------------
# KOMENDY ADMIN
# -------------------
@bot.tree.command(name="przejmij", description="Przejmij ticket jako admin")
@app_commands.checks.has_permissions(manage_channels=True)
async def przejmij(interaction: discord.Interaction):
    channel = interaction.channel
    if channel.id not in ticket_owners:
        await interaction.response.send_message("‚ùå To nie jest ticket.", ephemeral=True)
        return
    owner = interaction.guild.get_member(ticket_owners[channel.id])
    overwrites = {
        channel.guild.default_role: discord.PermissionOverwrite(view_channel=False),
        owner: discord.PermissionOverwrite(view_channel=True, send_messages=True),
        interaction.user: discord.PermissionOverwrite(view_channel=True, send_messages=True),
        channel.guild.me: discord.PermissionOverwrite(view_channel=True)
    }
    await channel.edit(overwrites=overwrites)
    await interaction.response.send_message(f"‚úÖ Ticket przejƒôty przez {interaction.user.mention}")

@bot.tree.command(name="wezwij", description="Wezwij w≈Ça≈õciciela ticketa")
@app_commands.checks.has_permissions(manage_channels=True)
async def wezwij(interaction: discord.Interaction):
    channel = interaction.channel
    if channel.id not in ticket_owners:
        await interaction.response.send_message("‚ùå To nie jest ticket.", ephemeral=True)
        return
    owner = interaction.guild.get_member(ticket_owners[channel.id])
    await channel.send(f"üîî {owner.mention}, administracja ciƒô wzywa!")
    await interaction.response.send_message("‚úÖ W≈Ça≈õciciel wezwany", ephemeral=True)

from flask import Flask
from threading import Thread

app = Flask('')

@app.route('/')
def home():
    return "Bot dzia≈Ça!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

keep_alive()  # wywo≈Çaj przed bot.run(TOKEN)

# -------------------
# URUCHOMIENIE BOTA
# -------------------
bot.run(TOKEN)
